QUESTION: 1
ANSWER:
// Write a function to calculate the area of a circle. (TSRS)
#include<stdio.h>
float areaOfCircle(int);
int main(){
    int radius;
    float result=0;
    printf("Enter Radius of circle:");
    scanf("%d",&radius);
    result = areaOfCircle(radius);
    printf("Area of circle is: %.3f",result);
    return 0;
}
float areaOfCircle(int x){
    return 3.14*x*x;
}
____________________________________________
QUESTION: 2
ANSWER:
// Write a function to calculate simple interest. (TSRS)
#include<stdio.h>
float simpleInterest(int, int, int);
int main(){
    int p, r, t;
    float si;
    printf("Enter value of P R T:");
    scanf("%d %d %d",&p, &r, &t);
    si = simpleInterest(p, r, t);
    printf("Simple interest is: %f",si);
    return 0;
}
float simpleInterest(int p, int r, int t){
    return (p*r*t)/100;
}
____________________________________________
QUESTION: 3
ANSWER:
// Write a function to check whether a given number is even or odd. Return 1 if the
// number is even, otherwise return 0. (TSRS)
int oddEven(int);
#include<stdio.h>
int main(){
    int number,flag=0;
    printf("Enter any number:");
    scanf("%d",&number);
    flag = oddEven(number);
    if (flag == 1)
    {
        printf("Given number is odd: %d",number);
    }
    else{
        printf("Given number is Even: %d",number);
    }
    return 0;
}
int oddEven(int number){
    if (number%2 == 0)
    {
        return 1;
    }
    return 0;
}
____________________________________________
QUESTION: 4
ANSWER:
// Write a function to print first N natural numbers (TSRN)
#include<stdio.h>
void firstNaturalNumber(int);
int main(){
    int n;
    printf("Enter any number:");
    scanf("%d",&n);
    firstNaturalNumber(n);
    return 0;
}
void firstNaturalNumber(int n){
    for (int i = 1; i <= n; i++)
    {
        printf("%d\n",i);
    }
}
____________________________________________
QUESTION: 5
ANSWER:
// Write a function to print first N odd natural numbers. (TSRN)
#include<stdio.h>
void firstOddNaturalNumber(int);
int main(){
    int n;
    printf("Enter any number:");
    scanf("%d",&n);
    firstOddNaturalNumber(n);
    return 0;
}
void firstOddNaturalNumber(int n){
    for (int i = 1; i <= n; i += 2)
    {
        printf("%d\n",i);
    }
}
____________________________________________
QUESTION: 6
ANSWER:
// Write a function to calculate the factorial of a number. (TSRS)
#include<stdio.h>
int factorial(int);
int main(){
    long long int num;
    printf("Enter any number:");
    scanf("%lld",&num);
    printf("factorial of given number is: %lld",factorial(num));
    return 0;
}
int factorial(int n){
    int fact=1;
    if (n >= 1)
    {
        fact = n * factorial(n-1);
    }
    return fact;
}
____________________________________________
QUESTION: 7
ANSWER:
// Write a function to calculate the number of combinations one can make from n items
// and r selected at a time. (TSRS)
#include<stdio.h>
#include<inttypes.h>
uint64_t combination(int, int);
uint64_t factorial(int);
int main(){
    int n, r;
    printf("Enter value of n and r:");
    scanf("%d %d", &n, &r);
    printf("Number of combination:");
    printf("%" PRId64 "\n",combination(n, r));
    return 0;
}
uint64_t combination(int x, int y){
    uint64_t result=0;
    int difference = x - y;
    result = factorial(x)/(factorial(y) * factorial(difference));
    return result;
}
uint64_t factorial(int n){
    uint64_t fact=1;
    if (n >= 1)
    {
        fact = n * factorial(n-1);
    }
    return fact;
}
____________________________________________
QUESTION: 8
ANSWER:
// Write a function to calculate the number of arrangements one can make from n items
// and r selected at a time. (TSRS)
#include<stdio.h>
#include<inttypes.h>
uint64_t combination(int, int);
uint64_t factorial(int);
int main(){
    int n, r;
    printf("Enter value of n and r:");
    scanf("%d %d", &n, &r);
    printf("Number of combination:");
    printf("%" PRId64 "\n",combination(n, r));
    return 0;
}
uint64_t combination(int x, int y){
    uint64_t result=0;
    int difference = x - y;
    result = factorial(x)/factorial(difference);
    return result;
}
uint64_t factorial(int n){
    uint64_t fact=1;
    if (n >= 1)
    {
        fact = n * factorial(n-1);
    }
    return fact;
}
____________________________________________
QUESTION: 9
ANSWER:
// Write a function to check whether a given number contains a given digit or not. (TSRS)
#include<stdio.h>
int digitFinder(int, int);
int rem;
int main(){
    int number, digit, place;
    printf("Enter any number and any digit to be search:");
    scanf("%d %d", &number, &digit);
    place = digitFinder(number, digit);
    place?printf("Digit present in number:"):printf("Digit not present in number:");
    // if (place)
    // {
    //     printf("Digit is at place:");
    // }
    // else{
    //     printf("Digit not present in number:");
    // }
    return 0;
}
int digitFinder(int x, int y){
    int retur;
    if (x > 0)
    {
        rem = x%10;
        if (rem == y)
        {
            return 1;
        }
        return digitFinder(x/10, y);
    }
    return 0;
}
____________________________________________
QUESTION: 10
ANSWER:
// Write a function to print all prime factors of a given number. For example, if the
// number is 36 then your result should be 2, 2, 3, 3. (TSRN)
#include<stdio.h>
void primeFactor(int);
int isPrime(int);
int main(){
    int num;
    printf("Enter any number:");
    scanf("%d",&num);
    primeFactor(num);
}
void primeFactor(int x){
    for (int i = 2 ; i <= x; )
    {
        while (1)
        {
            if (x%i == 0)
            {
                printf("%d ",i);
                x /= i;
            }
            else{
                // printf("%d ",i);
                break;
            }
        }
        i = isPrime(++i);
    }
}
int isPrime(int p){
    for (int i = p; i > 0; i++)
    {
        int flag = 0;
        for (int j = 2; j < i; j++)
        {
            if (i%j == 0)
            {
                flag = 1;
                break;
            }
            if (flag == 0)
            {
                return i;
            }   
        }
    }
}
____________________________________________